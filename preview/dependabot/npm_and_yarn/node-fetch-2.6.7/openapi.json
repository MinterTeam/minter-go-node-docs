{
  "openapi": "3.0.0",
  "info": {
    "version": "1.1.0",
    "title": "Minter Node API",
    "contact": {
      "email": "dl@minter.org"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/MinterTeam/minter-go-node/blob/master/LICENSE"
    },
    "x-logo": {
      "url": "https://github.com/MinterTeam/minter-go-node/raw/master/minter-logo.svg?sanitize=true",
      "altText": "Minter logo"
    },
    "description": "# Introduction\n\nMinter is a blockchain network that lets people, projects, and companies issue and manage their own coins and trade them at a fair market price with absolute and instant liquidity.\n\nGithub: https://github.com/MinterTeam/minter-go-node \\\nOfficial site: https://minter.network/\n\n# Install Minter\n\nThere are several ways you can install Minter Blockchain Testnet node on your machine.\n\n## Using binary\n\n1. **Download Minter**\n\n   Get [latest binary build](https://github.com/MinterTeam/minter-go-node/releases) suitable for your architecture and unpack it to desired folder.\n\n2. **Run Minter**\n\n   ```bash\n   ./minter node\n   ```\n\n## From Source\n\nYou'll need `golang` installed https://golang.org/doc/install and the required\n[environment variables set](https://github.com/tendermint/tendermint/wiki/Setting-GOPATH)\n\n1. **Clone Minter source code to your machine**\n\n  ```bash\n  mkdir -p $GOPATH/src/github.com/MinterTeam\n  cd $GOPATH/src/github.com/MinterTeam\n  git clone https://github.com/MinterTeam/minter-go-node.git\n  cd minter-go-node\n  ```\n\n2. **Get Tools & Dependencies**\n\n  ```bash\n  make get_tools\n  make get_vendor_deps\n  ```\n\n3. **Compile**\n\n  ```bash\n  make install\n  ```\n\n  to put the binary in `$GOPATH/bin` or use:\n\n  ```bash\n  make build\n  ```\n\n  to put the binary in `./build`.\n\n  The latest `minter version` is now installed.\n\n4. **Run Minter**\n\n  ```bash\n  ./build/minter node\n  ```\n  or \n  ```bash\n  minter node\n  ```\n\n# Blockchain Specification\n\n**Tendermint**\n\nMinter Blockchain utilizes `Tendermint Consensus Engine`.\n\nTendermint is software for securely and consistently replicating an application on many machines.\nBy securely, we mean that Tendermint works even if up to 1/3 of machines fail in arbitrary ways.\nBy consistently, we mean that every non-faulty machine sees the same transaction log and computes the same state.\nSecure and consistent replication is a fundamental problem in distributed systems; it plays a critical role in the\nfault tolerance of a broad range of applications, from currencies, to elections, to infrastructure orchestration,\nand beyond.\n\nTendermint is designed to be easy-to-use, simple-to-understand, highly performant, and useful for a wide variety of\ndistributed applications.\n\nYou can read more about Tendermint Consensus in [official documentation](https://tendermint.com/docs/)\n\n**Consensus**\n\nIn Minter we implemented Delegated Proof of Stake (DPOS) Consensus Protocol.\n\nDPOS is the fastest, most efficient, most decentralized, and most flexible consensus model available. DPOS leverages the power of stakeholder approval voting to resolve consensus issues in a fair and democratic way.\n\n**Block speed**\n\nMinter Blockchain is configured to produce `1 block per 5 sec`. Actual block speed may vary depends on validators count, their computational power, internet speed, etc.\n\n**Block size**\n\nWe limit block size to `10 000 transactions`. Block size in terms of bytes is not limited.\n\n# Coins\n\nMinter Blockchain is multi-coin system.\n\nBase coin in testnet is `MNT`.\\\nBase coin in mainnet is `BIP`.\n\nSmallest part of *each* coin is called `pip`.\\\n1 pip = 1^-18 of any coin. In Blockchain and API we only operating with pips.\n\n> **Note:** Each coin has its **own** pip. You should treat pip like atomic part of a coin, not as currency:\\\n> 1 MNT = 10^18 pip (MNT's pip)\\\n> 1 ABC = 10^18 pip (ABC's pip)\\\n> 1 MNT != 1 ABC\n\n## Coin Issuance\n\nEvery user of Minter can issue own coin. Each coin is backed by base coin in some proportion.\nIssue own coin is as simple as filling a form with given fields:\n\n- **Coin name** - Name of a coin. Arbitrary string up to 64 letters length.\n- **Coin symbol** - Symbol of a coin. Must be unique, alphabetic, uppercase, 3 to 10 letters length.\n- **Initial supply** - Amount of coins to issue. Issued coins will be available to sender account. Should be between 1 and 1,000,000,000,000,000 coins.\n- **Initial reserve** - Initial reserve in base coin. Should be at least 10 bips.\n- **Constant Reserve Ratio (CRR)** - uint, should be from 10 to 100.\n- **Max supply** - Max amount of coins that are allowed to be issued. Maximum is 1,000,000,000,000,000\n\n\nAfter coin issued you can send is as ordinary coin using standard wallets.\n\n## Issuance Fees\n\nTo issue a coin Coiner should pay fee. Fee is depends on length of Coin Symbol.\n\n3 letters – 1 000 000 bips\\\n4 letters – 100 000 bips\\\n5 letters – 10 000 bips\\\n6 letters – 1000 bips\\\n7-10 letters – 100 bips\n\n## Coin Exchange\n\nEach coin in system can be instantly exchanged to another coin. This is possible because each coin has \"reserve\" in base\ncoin.\n\nHere are some formulas we are using for coin conversion:\n\n**CalculatePurchaseReturn**\\\nGiven a coin supply (s), reserve balance (r), CRR (c) and a deposit amount (d), calculates the return for a given conversion (in the base coin):\n\n```go\nreturn s * ((1 + d / r) ^ c - 1);\n```\n\n\n**CalculateSaleReturn**\\\nGiven a coin supply (s), reserve balance (r), CRR (c) and a sell amount (a), calculates the return for a given conversion\n\n```go\nreturn r * (1 - (1 - a / s) ^ (1 / c));\n```\n\n# Transactions\n\nTransactions in Minter are [RLP-encoded](https://github.com/ethereum/wiki/wiki/RLP) structures.\n\nExample of a signed transaction:\n\n    f873230101aae98a4d4e540000000000000094a93163fdf10724dc4785ff5cbfb9\n    ac0b5949409f880de0b6b3a764000080801ba06838db4a2197cfd70ede8d8d184d\n    bf332932ca051a243eb7886791250e545dd3a04b63fb1d1b5ef5f2cbd2ea12530c\n    da520b3280dcb75bfd45a873629109f24b29\n\nEach transaction has:\n\n-   **Nonce** - int, used for prevent transaction reply.\n-   **ChainID** - id of the network (1 - mainnet, 2 - testnet)\n-   **Gas Price** - big int, fee multiplier, should be equal or greater than current mempool min gas price.\n-   **Gas Coin** - 10 bytes, symbol of a coin to pay fee, right padded with zeros\n-   **Type** - type of transaction (see below).\n-   **Data** - data of transaction (depends on transaction type).\n-   **Payload** (arbitrary bytes) - arbitrary user-defined bytes.\n-   **Service Data** - reserved field.\n-   **Signature Type** - single or multisig transaction.\n-   **Signature Data** - digital signature of transaction.\n\n```go\ntype Transaction struct {\n    Nonce         uint64\n    ChainID       byte\n    GasPrice      *big.Int\n    GasCoin       [10]byte\n    Type          byte\n    Data          []byte\n    Payload       []byte\n    ServiceData   []byte\n    SignatureType byte\n    SignatureData Signature\n}\n\ntype Signature struct {\n    V           *big.Int\n    R           *big.Int\n    S           *big.Int\n}\n\ntype MultiSignature struct {\n    MultisigAddress [20]byte\n    Signatures      []Signature\n}\n```\n\n## Signature Types\n\n|Type Name                           |Byte|\n|----------------------------------- |----|\n|**TypeSingle**                      |0x01|\n|**TypeMulti**                       |0x02|\n\n## Types\n\nType of transaction is determined by a single byte.\n\n|Type Name                           |Byte|\n|----------------------------------- |----|\n|**TypeSend**                        |0x01|\n|**TypeSellCoin**                    |0x02|\n|**TypeSellAllCoin**                 |0x03|\n|**TypeBuyCoin**                     |0x04|\n|**TypeCreateCoin**                  |0x05|\n|**TypeDeclareCandidacy**            |0x06|\n|**TypeDelegate**                    |0x07|\n|**TypeUnbond**                      |0x08|\n|**TypeRedeemCheck**                 |0x09|\n|**TypeSetCandidateOnline**          |0x0A|\n|**TypeSetCandidateOffline**         |0x0B|\n|**TypeCreateMultisig**              |0x0C|\n|**TypeMultisend**                   |0x0D|\n|**TypeEditCandidate**               |0x0E|\n\n## Send transaction\n\nType: **0x01**\n\nTransaction for sending arbitrary coin.\n\n*Data field contents:*\n\n```go\ntype SendData struct {\n    Coin  [10]byte\n    To    [20]byte\n    Value *big.Int\n}\n```\n\n**Coin** - Symbol of a coin.\n**To** - Recipient address in Minter Network.\n**Value** - Amount of **Coin** to send.\n\n## Sell coin transaction\n\nType: **0x02**\n\nTransaction for selling one coin (owned by sender) in favour of another coin in a system.\n\n*Data field contents:*\n\n```go\ntype SellCoinData struct {\n    CoinToSell          [10]byte\n    ValueToSell         *big.Int\n    CoinToBuy           [10]byte\n    MinimumValueToBuy   *big.Int\n}\n```\n\n**CoinToSell** - Symbol of a coin to give.\n**ValueToSell** - Amount of **CoinToSell** to give.\n**CoinToBuy** - Symbol of a coin to get.\n**MinimumValueToBuy** - Minimum value of coins to get.\n\n## Sell all coin transaction\n\nType: **0x03**\n\nTransaction for selling all existing coins of one type (owned by sender) in favour of another coin in a system.\n\n*Data field contents:*\n\n```go\ntype SellAllCoinData struct {\n    CoinToSell          [10]byte\n    CoinToBuy           [10]byte\n    MinimumValueToBuy   *big.Int\n}\n```\n\n**CoinToSell** - Symbol of a coin to give.\n**CoinToBuy** - Symbol of a coin to get.\n**MinimumValueToBuy** - Minimum value of coins to get.\n\n## Buy coin transaction\n\nType: **0x04**\n\nTransaction for buy a coin paying another coin (owned by sender).\n\n*Data field contents:*\n\n```go\ntype BuyCoinData struct {\n    CoinToBuy           [10]byte\n    ValueToBuy          *big.Int\n    CoinToSell          [10]byte\n    MaximumValueToSell  *big.Int\n}\n```\n\n**CoinToBuy** - Symbol of a coin to get.\n**ValueToBuy** - Amount of **CoinToBuy** to get.\n**CoinToSell** - Symbol of a coin to give.\n**MaximumValueToSell** - Maximum value of coins to sell.\n\n## Create coin transaction\n\nType: **0x05**\n\nTransaction for creating new coin in a system.\n\n*Data field contents:*\n\n```go\ntype CreateCoinData struct {\n    Name                 string\n    Symbol               [10]byte\n    InitialAmount        *big.Int\n    InitialReserve       *big.Int\n    ConstantReserveRatio uint\n    MaxSupply            *big.Int\n}\n```\n\n**Name** - Name of a coin. Arbitrary string up to 64 letters length.\n**Symbol** - Symbol of a coin. Must be unique, alphabetic, uppercase, 3 to 10 symbols length.\n**InitialAmount** - Amount of coins to issue. Issued coins will be available to sender account.\n**InitialReserve** - Initial reserve in BIP's.\n**ConstantReserveRatio** - CRR, uint, should be from 10 to 100.\n**MaxSupply** - Max amount of coins that are allowed to be issued. Maximum is 1,000,000,000,000,000.\n\n## Declare candidacy transaction\n\nType: **0x06**\n\nTransaction for declaring new validator candidacy.\n\n*Data field contents:*\n\n```go\ntype DeclareCandidacyData struct {\n    Address    [20]byte\n    PubKey     []byte\n    Commission uint\n    Coin       [10]byte\n    Stake      *big.Int\n}\n```\n\n**Address** - Address of candidate in Minter Network. This address would be able to control candidate. Also all rewards will be sent to this address.\n**PubKey** - Public key of a validator.\n**Commission** - Commission (from 0 to 100) from rewards which delegators will pay to validator.\n**Coin** - Symbol of coin to stake.\n**Stake** - Amount of coins to stake.\n\n## Delegate transaction\n\nType: **0x07**\n\nTransaction for delegating funds to validator.\n\n*Data field contents:*\n\n```go\ntype DelegateData struct {\n    PubKey []byte\n    Coin   [10]byte\n    Value  *big.Int\n}\n```\n\n**PubKey** - Public key of a validator.\n**Coin** - Symbol of coin to stake.\n**Value** - Amount of coins to stake.\n\n## Unbond transaction\n\nType: **0x08**\n\nTransaction for unbonding funds from validator's stake.\n\n*Data field contents:*\n\n```go\ntype UnbondData struct {\n    PubKey []byte\n    Coin   [10]byte\n    Value  *big.Int\n}\n```\n\n**PubKey** - Public key of a validator.\n**Coin** - Symbol of coin to unbond.\n**Value** - Amount of coins to unbond.\n\n## Redeem check transaction\n\nType: **0x09**\n\nTransaction for redeeming a check.\n\n*Data field contents:*\n\n```go\ntype RedeemCheckData struct {\n    Check []byte\n    Proof [65]byte\n}\n```\n\n**Check** - Check received from sender.\n**Proof** - Proof of owning a check: password signed with recipient's address. [Read more](https://docs.minter.network/#section/Minter-Check/Check-hijacking-protection)\n\nNote that maximum GasPrice is limited to 1 to prevent fraud, because GasPrice is set by redeem tx sender but commission is charded from check issuer.\n\n## Set candidate online transaction\n\nType: **0x0A**\n\nTransaction for turning candidate on. This transaction should be sent from address which is set in the \"Declare candidacy transaction\".\n\n*Data field contents:*\n\n```go\ntype SetCandidateOnData struct {\n    PubKey []byte\n}\n```\n\n**PubKey** - Public key of a validator.\n\n## Set candidate offline transaction\n\nType: **0x0B**\n\nTransaction for turning candidate off. This transaction should be sent from address which is set in the \"Declare candidacy transaction\".\n\n*Data field contents:*\n\n```go\ntype SetCandidateOffData struct {\n    PubKey []byte\n}\n```\n\n**PubKey** - Public key of a validator.\n\n## Create multisig address\n\nType: **0x0C**\n\nTransaction for creating multisignature address.\n\n*Data field contents:*\n\n```go\ntype CreateMultisigData struct {\n    Threshold uint\n    Weights   []uint\n    Addresses [][20]byte\n}\n```\n\n## Multisend transaction\n\nType: **0x0D**\n\nTransaction for sending coins to multiple addresses. *MultisendData can contain only 100 items. Therefore, this type of transaction has a limit of 100 recipent addresses.*\n\n*Data field contents:*\n\n```go\ntype MultisendData struct {\n    List []MultisendDataItem\n}\n\ntype MultisendDataItem struct {\n    Coin  [10]byte\n    To    [20]byte\n    Value *big.Int\n}\n```\n\n## Edit candidate transaction\n\nType: **0x0E**\n\nTransaction for editing existing candidate\n\n*Data field contents:*\n\n```go\ntype EditCandidateData struct {\n    PubKey           []byte\n    RewardAddress    [20]byte\n    OwnerAddress     [20]byte\n}\n```\n\n# Minter Check\n\nMinter Check is like an ordinary bank check. Each user of network can\nissue check with any amount of coins and pass it to another person.\nReceiver will be able to cash a check from arbitrary account.\n\n## Introduction\n\nChecks are prefixed with \"Mc\". Here is example of a Minter Check:\n\n```\nMcf89b01830f423f8a4d4e5400000000000000843b9aca00b8419b3beac2c6ad88a8bd54d2\n4912754bb820e58345731cb1b9bc0885ee74f9e50a58a80aa990a29c98b05541b266af99d3\n825bb1e5ed4e540c6e2f7c9b40af9ecc011ca0387fd67ec41be0f1cf92c7d0181368b4c67a\nb07df2d2384192520d74ff77ace6a04ba0e7ad7b34c64223fe59584bc464d53fcdc7091faa\nee5df0451254062cfb37\n```\n\nEach Minter Check has:\n-   **Nonce** - unique \"id\" of the check.\n-   **Coin Symbol** - symbol of coin.\n-   **Value** - amount of coins.\n-   **GasCoin** - symbol of a coin to pay fee.\n-   **Due Block** - defines last block height in which the check can\n    be used.\n-   **Lock** - secret to prevent hijacking.\n-   **Signature** - signature of issuer.\n\n## Check hijacking protection\n\nMinter Checks are issued offline and do not exist in blockchain before\n\"cashing\". So we decided to use special passphrase to protect checks\nfrom hijacking by another person in the moment of activation. Hash of\nthis passphrase is used as private key in ECDSA to prove that sender is\nthe one who owns the check.\n\n*TODO: describe algorithm*\n\n## How to issue a Minter Check\n\nFor issuing Minter Check you can use our\n[Console](https://console.minter.network).\n\nYou will need to fill a form:\n-   **Nonce** - unique \\\"id\\\" of the check.\n-   **Coin Symbol** - symbol of coin.\n-   **Gas coin** - symbol of a coin to pay fee.\n-   **Value** - amount of coins.\n-   **Pass phrase** - secret phrase which you will pass to receiver\n    of the check.\n        \n## How to cash a Minter Check\n\nTo redeem a check user should have:\n-   Check itself\n-   Secret passphrase\n\nAfter redeeming balance of user will increased instantly.\n\n## Commission\n\nThere is no commission for issuing a check because it done offline. In\nthe moment of cashing issuer will pay commission.\n\n# Multisignatures\n\nMinter has built-in support for multisignature wallets. Multisignatures,\nor technically Accountable Subgroup Multisignatures (ASM), are signature\nschemes which enable any subgroup of a set of signers to sign any\nmessage, and reveal to the verifier exactly who the signers were.\n\nSuppose the set of signers is of size *n*. If we validate a signature if\nany subgroup of size *k* signs a message, this becomes what is commonly\nreffered to as a *k* of *n* multisig in Bitcoin.\n\nMinter Multisig Wallets has 2 main goals:\n-   Atomic swaps with sidechains\n-   Basic usage to manage funds within Minter Blockchain\n\n## Structure of multisig wallet\n\nEach multisig wallet has:\n-   Set of signers with corresponding weights\n-   Threshold\n\nTransactions from multisig wallets are proceed identically to the K of N\nmultisig in Bitcoin, except the multisig fails if the sum of the weights\nof signatures is less than the threshold.\n\n## How to create multisig wallet\n\nTO BE DESCRIBED\n\n## How to use multisig wallet\n\nTO BE DESCRIBED\n\n# Commissions\n\nFor each transaction sender should pay fee. Fees are measured in\n\"units\".\n\n1 unit = 10^15 pip = 0.001 bip.\n\n## Standard commissions\n\nHere is a list of current fees:\n\n  |Type                             | Fee |\n  |---------------------------------| ---------------------|\n  |**TypeSend**                     | 10 units |\n  |**TypeSellCoin**                 | 100 units |\n  |**TypeSellAllCoin**              | 100 units |\n  |**TypeBuyCoin**                  | 100 units |\n  |**TypeCreateCoin**               | Depends on the coin symbol length |\n  |**TypeDeclareCandidacy**         | 10000 units |\n  |**TypeDelegate**                 | 200 units |\n  |**TypeUnbond**                   | 200 units |\n  |**TypeRedeemCheck**              | 30 units |\n  |**TypeSetCandidateOnline**       | 100 units |\n  |**TypeSetCandidateOffline**      | 100 units |\n  |**TypeCreateMultisig**           | 100 units |\n  |**TypeMultisend**                | 10+(n-1)*5 units |\n  |**TypeEditCandidate**            | 10000 units |\n\nAlso sender should pay extra 2 units per byte in Payload and Service\nData fields.\n\n## Special fees\n\nTo issue a coin with short name Coiner should pay extra fee. Fee is\ndepends on length of Coin Symbol.\n\n3 letters — 1 000 000 bips\\\n4 letters — 100 000 bips\\\n5 letters — 10 000 bips\\\n6 letters — 1000 bips\\\n7-10 letters — 100 bips\n\n# Validators\n\n## Introduction\n\nThe Minter Blockchain is based on Tendermint, which relies on a set of\nvalidators that are responsible for committing new blocks in the\nblockchain. These validators participate in the consensus protocol by\nbroadcasting votes which contain cryptographic signatures signed by each\nvalidator's private key.\n\nValidator candidates can bond their own coins and have coins\n\"delegated\", or staked, to them by token holders. The validators are\ndetermined by who has the most stake delegated to them.\n\nValidators and their delegators will earn BIP (MNT) as rewards for\nblocks and commissions. Note that validators can set commission on the\nrewards their delegators receive as additional incentive.\n\nIf validators double sign or frequently offline, their staked coins\n(including coins of users that delegated to them) can be slashed. The\npenalty depends on the severity of the violation.\n\n## Requirements\nMinimal requirements for running Validator\\'s Node in testnet are:\n\n-   4GB RAM\n-   200GB SSD\n-   x64 2.0 GHz 4 vCPUs\n\nSSD disks are preferable for high transaction throughput.\n\nRecommended:\n\n-   4GB RAM\n-   200GB SSD\n-   x64 3.4 GHz 8 vCPUs\n-   HSM\n\n## Validators limitations\nMinter Network has limited number of available slots for validators.\n\nAt genesis there are `16` slots. `4` slots will be added each\n`518,400` blocks. Maximum number of validators is `256`.\n\n## Rewards\nRewards for blocks and commissions are accumulated and proportionally\n(based on stake value) payed once per `12 blocks` (approx 1 minute) to\nall active validators (and their delegators).\n\nBlock rewards are configured to decrease from 333 to 0 BIP (MNT) in \\~7\nyears.\n\nDelegators receive their rewards at the same time after paying\ncommission to their validators (commission value is based on\nvalidator\\'s settings).\n\n`10%` from reward going to DAO account.\n\n`10%` from reward going to Developers.\n\n## Rules and fines\n\nValidators have one main responsibility:\n-   Be able to constantly run a correct version of the software:\n    validators need to make sure that their servers are always online\n    and their private keys are not compromised.\n\nIf a validator misbehaves, its bonded stake along with its delegators\\'\nstake and will be slashed. The severity of the punishment depends on the\ntype of fault. There are 3 main faults that can result in slashing of\nfunds for a validator and its delegators:\n\n-   **Double signing**: If someone reports on chain A that a validator\n    signed two blocks at the same height on chain A and chain B, this\n    validator will get slashed on chain A\n-   **Unavailability**: If a validator\\'s signature has not been\n    included in the last 12 blocks, 1% of stake will get slashed and\n    validator will be turned off\n\nNote that even if a validator does not intentionally misbehave, it can\nstill be slashed if its node crashes, looses connectivity, gets DDOSed,\nor if its private key is compromised.\n\n## Becoming validator in testnet\n\n1. Install and run Minter Full Node.\n2. Get your validator\\'s public key (`minter show_validator`).\n3. Go to [Minter Console](https://testnet.console.minter.network/masternode/) and send 2 transactions:\n  \n  Fill and send `Declare candidacy` and `Set candidate online` forms.\n\n  1. Declare candidacy\n\n      Validators should declare their candidacy, after which users\n      can delegate and, if they so wish, unbond. Then declaring\n      candidacy validator should fill a form:\n\n      -   Address - You will receive rewards to this address and\n          will be able to on/off your validator.\n      -   Public Key - Paste public key from step 2 *(Mp\\...)*.\n      -   Commission - Set commission for delegated stakes.\n      -   Coin - Enter coin of your stake (i.e. MNT).\n      -   Stake - Enter value of your stake in given coin.\n\n  2. Set candidate online\n\n      Validator is **offline** by default. When offline, validator\n      is not included in the list of Minter Blockchain validators,\n      so he is not receiving any rewards and cannot be punished\n      for low availability.\n\n      To turn your validator **on**, you should provide Public Key\n      (from step 2 *(Mp\\...)*).\n\n      *Note: You should send transaction from address you choose\n      in Address field in step 3.1*\n\n4. Done.\n\n  Now you will receive reward as long as your node is running and available.\n\n## DDOS protection. Sentry node architecture\nDenial-of-service attacks occur when an attacker sends a flood of\ninternet traffic to an IP address to prevent the server at the IP\naddress from connecting to the internet.\n\nAn attacker scans the network, tries to learn the IP address of various\nvalidator nodes and disconnect them from communication by flooding them\nwith traffic.\n\nOne recommended way to mitigate these risks is for validators to\ncarefully structure their network topology in a so-called sentry node\narchitecture.\n\nValidator nodes should only connect to full-nodes they trust because\nthey operate them themselves or are run by other validators they know\nsocially. A validator node will typically run in a data center. Most\ndata centers provide direct links the networks of major cloud providers.\nThe validator can use those links to connect to sentry nodes in the\ncloud. This shifts the burden of denial-of-service from the validator\\'s\nnode directly to its sentry nodes, and may require new sentry nodes be\nspun up or activated to mitigate attacks on existing ones.\n\nSentry nodes can be quickly spun up or change their IP addresses.\nBecause the links to the sentry nodes are in private IP space, an\ninternet based attacked cannot disturb them directly. This will ensure\nvalidator block proposals and votes always make it to the rest of the\nnetwork.\n\nIt is expected that good operating procedures on that part of validators\nwill completely mitigate these threats.\n\n### Practical instructions\n\nTo setup your sentry node architecture you can follow the instructions\nbelow:\n\nValidators nodes should edit their `config.toml`:\n```toml\n    # Comma separated list of nodes to keep persistent connections to\n    # Do not add private peers to this list if you don't want them advertised\n    persistent_peers = [list of sentry nodes]\n\n    # Set true to enable the peer-exchange reactor\n    pex = false\n```\n\nSentry Nodes should edit their `config.toml`:\n```toml\n    # Comma separated list of peer IDs to keep private (will not be gossiped to other peers)\n    private_peer_ids = \"ipaddress of validator nodes\"\n```\n\n# Delegator FAQ\n\n## What is a delegator?\nPeople that cannot, or do not want to run validator operations, can\nstill participate in the staking process as delegators. Indeed,\nvalidators are not chosen based on their own stake but based on their\ntotal stake, which is the sum of their own stake and of the stake that\nis delegated to them. This is an important property, as it makes\ndelegators a safeguard against validators that exhibit bad behavior. If\na validator misbehaves, its delegators will move their staked coins away\nfrom it, thereby reducing its stake. Eventually, if a validator\\'s stake\nfalls under the top addresses with highest stake, it will exit the\nvalidator set.\n\nDelegators share the revenue of their validators, but they also share\nthe risks. In terms of revenue, validators and delegators differ in that\nvalidators can apply a commission on the revenue that goes to their\ndelegator before it is distributed. This commission is known to\ndelegators beforehand and cannot be changed. In terms of risk,\ndelegators\\' coins can be slashed if their validator misbehaves. For\nmore, see Risks section.\n\nTo become delegators, coin holders need to send a \\\"Delegate\ntransaction\\\" where they specify how many coins they want to bond and to\nwhich validator. Later, if a delegator wants to unbond part or all of\nits stake, it needs to send an \\\"Unbond transaction\\\". From there, the\ndelegator will have to wait 30 days to retrieve its coins.\n\n## Directives of delegators\nBeing a delegator is not a passive task. Here are the main directives of\na delegator:\n- Perform careful due diligence on validators before delegating. If a\n    validator misbehaves, part of its total stake, which includes the\n    stake of its delegators, can be slashed. Delegators should therefore\n    carefully select validators they think will behave correctly.\n- Actively monitor their validator after having delegated. Delegators\n    should ensure that the validators they\\'re delegating to behaves\n    correctly, meaning that they have good uptime, do not get hacked and\n    participate in governance. If a delegator is not satisfied with its\n    validator, it can unbond and switch to another validator.\n\n## Revenue\nValidators and delegators earn revenue in exchange for their services. This revenue is given in three forms:\n- Block rewards\n- Transaction fees: Each transaction on the Minter Network comes with\n    transactions fees. Fees are distributed to validators and delegators\n    in proportion to their stake.\n\n## Validator commission\nEach validator\\'s staking pool receives revenue in proportion to its\ntotal stake. However, before this revenue is distributed to delegators\ninside the staking pool, the validator can apply a commission. In other\nwords, delegators have to pay a commission to their validators on the\nrevenue they earn.\n\n`10%` from reward going to DAO account.\n\n`10%` from reward going to Developers.\n\nLets consider a validator whose stake (i.e. self-bonded stake +\ndelegated stake) is 10% of the total stake of all validators. This\nvalidator has 20% self-bonded stake and applies a commission of 10%. Now\nlet us consider a block with the following revenue:\n- 111 Bips as block reward (after subtraction taxes of 20%)\n- 10 Bips as transaction fees (after subtraction taxes of 20%)\n\nThis amounts to a total of 121 Bips to be distributed among all staking\npools.\n\nOur validator\\'s staking pool represents 10% of the total stake, which\nmeans the pool obtains 12.1 bips. Now let us look at the internal\ndistribution of revenue:\n- Commission = 10% * 80% * 12.1 bips = 0.69696 bips\n- Validator\\'s revenue = 20% * 12.1 bips + Commission = 3.11696 bips\n- Delegators\\' total revenue = 80% * 12.1 bips - Commission = 8.98304\n    bips\n\nThen, each delegator in the staking pool can claim its portion of the\ndelegators\\' total revenue.\n\n## Risks\nStaking coins is not free of risk. First, staked coins are locked up,\nand retrieving them requires a 30 days waiting period called unbonding\nperiod. Additionally, if a validator misbehaves, a portion of its total\nstake can be slashed (i.e. destroyed). This includes the stake of their\ndelegators.\n\nThere are 2 main slashing conditions:\n- **Double signing**: If someone reports on chain A that a validator\n    signed two blocks at the same height on chain A and chain B, this\n    validator will get slashed on chain A\n- **Unavailability**: If a validator\\'s signature has not been\n    included in the last 12 blocks, 1% of stake will get slashed and\n    validator will be turned off\n\nThis is why delegators should perform careful due diligence on\nvalidators before delegating. It is also important that delegators\nactively monitor the activity of their validators. If a validator\nbehaves suspiciously or is too often offline, delegators can choose to\nunbond from it or switch to another validator. Delegators can also\nmitigate risk by distributing their stake across multiple validators.\n\n# Minter SDKs\n\n## GO SDK\n-   [minter-go-sdk](https://github.com/MinterTeam/minter-go-sdk) – a\n    pure GO SDK for working with Minter blockchain\n    \n## JavaScript SDK\n-   [minter-js-sdk](https://github.com/MinterTeam/minter-js-sdk) –\n    communicate with the Minter blockchain through its API\n-   [minterjs-wallet](https://github.com/MinterTeam/minterjs-wallet) –\n    BIP0032 HD Wallet implementation\n-   [minterjs-tx](https://github.com/MinterTeam/minterjs-tx) – create,\n    manipulate and sign Minter transactions\n-   [minterjs-util](https://github.com/MinterTeam/minterjs-util) – a\n    collection of utility functions for Minter\n\n## iOS SDK\n-   [minter-ios-core](https://github.com/MinterTeam/minter-ios-core) –\n    create, manipulate and sign Minter transactions\n-   [minter-ios-explorer](https://github.com/MinterTeam/minter-ios-explorer)\n    – communicate with the Minter blockchain through Explorer\n-   [minter-ios-my](https://github.com/MinterTeam/minter-ios-my) –\n    communicate with the my.minter user database\n\n## PHP SDK\n-   [minter-php-sdk](https://github.com/MinterTeam/minter-php-sdk) – a\n    pure PHP SDK for working with Minter blockchain\n\n## Android SDK\n-   [minter-android-core](https://github.com/MinterTeam/minter-android-core) -\n    foundation for all Minter blockchain operations\n-   [minter-android-blockchain](https://github.com/MinterTeam/minter-android-blockchain) -\n    operate with Minter transactions using this sdk\n-   [minter-android-explorer](https://github.com/MinterTeam/minter-android-explorer) -\n    communicate with the Minter blockchain through the Explorer\n\n\n## C++ SDK\n- [cpp-minter](https://github.com/MinterTeam/cpp-minter) - build and sign any transaction, generate mnemonic with private and public key\n\n# Other public services\n## Explorer API\n\n  [Documentation](https://app.swaggerhub.com/apis-docs/GrKamil/minter-explorer_api)\n\n  Testnet base url: https://explorer-api.testnet.minter.network/api/\n\n  Mainnet base url: https://explorer-api.minter.network/api/\n\n## Gate API\n  Minter Gate is a service which provides to clients publish prepared transactions to the Minter Network\n\n  [Documentation](https://minterteam.github.io/minter-gate-docs/#section/Introduction)\n\n  Testnet base url: https://gate-api.testnet.minter.network/api/\n\n  Mainnet base url: https://gate-api.minter.network/api/\n"
  },
  "tags": [
    {
      "name": "Node API"
    }
  ],
  "servers": [
    {
      "url": "https://minter-node-1.testnet.minter.network:8841/",
      "description": "Minter Team testnet server"
    }
  ],
  "components": {
    "responses": {
      "Error": {
        "description": "RPC error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "jsonrpc": {
                  "type": "string",
                  "example": "2.0"
                },
                "id": {
                  "type": "string",
                  "example": ""
                },
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": -32602,
                      "description": "General error code"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid params",
                      "description": "Short description of an error"
                    },
                    "data": {
                      "type": "string",
                      "example": "Error converting http params to arguments: invalid character looking for beginning of value",
                      "description": "Full description of an error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "EventsResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "events": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/RewardEvent"
                    },
                    {
                      "$ref": "#/components/schemas/SlashEvent"
                    },
                    {
                      "$ref": "#/components/schemas/CoinLiquidationEvent"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "RewardEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "minter/RewardEvent"
          },
          "value": {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "example": "DAO"
              },
              "address": {
                "type": "string",
                "example": "Mxee81347211c72524338f9680072af90744333146"
              },
              "amount": {
                "type": "string",
                "example": "99470365861103987235"
              },
              "validator_pub_key": {
                "type": "string",
                "example": "Mpb54df5b1abc46ecdb08935d6fc2f4526eba27caf1b6f2f87b3477ef3119bc0fd"
              }
            }
          }
        }
      },
      "SlashEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "minter/SlashEvent"
          },
          "value": {
            "type": "object",
            "properties": {
              "coin": {
                "type": "string",
                "example": "MNT"
              },
              "address": {
                "type": "string",
                "example": "Mxee81347211c72524338f9680072af90744333146"
              },
              "amount": {
                "type": "string",
                "example": "99470365861103987235"
              },
              "validator_pub_key": {
                "type": "string",
                "example": "Mpb54df5b1abc46ecdb08935d6fc2f4526eba27caf1b6f2f87b3477ef3119bc0fd"
              }
            }
          }
        }
      },
      "CoinLiquidationEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "minter/CoinLiquidationEvent"
          },
          "value": {
            "type": "object",
            "properties": {
              "coin": {
                "type": "string",
                "example": "ABC"
              }
            }
          }
        }
      },
      "MaxGasResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "string",
            "example": "100000"
          }
        }
      },
      "MinGasResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "string",
            "example": "1"
          }
        }
      },
      "AddressResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "balance": {
                "type": "object",
                "description": "Map of address' balances",
                "minProperties": 1,
                "properties": {
                  "MNT": {
                    "type": "string",
                    "example": "10000000000000000000"
                  }
                }
              },
              "transaction_count": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      },
      "BlockResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "hash": {
                "type": "string",
                "example": "129ABDC2A6396C38D4FF60DFE2850E8A88046744FDBA9B76ABFA752A11F16AA1"
              },
              "height": {
                "type": "string",
                "example": "1"
              },
              "time": {
                "type": "string",
                "example": "2018-12-24T13:04:19.45937898Z"
              },
              "num_txs": {
                "type": "string",
                "example": "1"
              },
              "total_txs": {
                "type": "string",
                "example": "1"
              },
              "transactions": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/SendTx"
                    },
                    {
                      "$ref": "#/components/schemas/SellCoinTx"
                    },
                    {
                      "$ref": "#/components/schemas/SellAllCoinTx"
                    },
                    {
                      "$ref": "#/components/schemas/BuyCoinTx"
                    },
                    {
                      "$ref": "#/components/schemas/CreateCoinTx"
                    },
                    {
                      "$ref": "#/components/schemas/DeclareCandidacyTx"
                    },
                    {
                      "$ref": "#/components/schemas/DelegateTx"
                    },
                    {
                      "$ref": "#/components/schemas/UnbondTx"
                    },
                    {
                      "$ref": "#/components/schemas/RedeemCheckTx"
                    },
                    {
                      "$ref": "#/components/schemas/SetCandidateOffTx"
                    },
                    {
                      "$ref": "#/components/schemas/SetCandidateOnTx"
                    },
                    {
                      "$ref": "#/components/schemas/CreateMultisigTx"
                    },
                    {
                      "$ref": "#/components/schemas/MultisendTx"
                    },
                    {
                      "$ref": "#/components/schemas/EditCandidateTx"
                    }
                  ]
                }
              },
              "block_reward": {
                "type": "string",
                "example": "333000000000000000000"
              },
              "size": {
                "type": "string",
                "example": "1352"
              },
              "proposer": {
                "type": "string",
                "example": "Mp4ae1ee73e6136c85b0ca933a9a1347758a334885f10b3238398a67ac2eb153b8"
              },
              "validators": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "pub_key": {
                      "type": "string",
                      "example": "Mp738da41ba6a7b7d69b7294afa158b89c5a1b410cbf0c2443c85c5fe24ad1dd1c"
                    },
                    "signed": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BlockNotFoundResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "example": 404,
                "description": "General error code"
              },
              "message": {
                "type": "string",
                "example": "Block not found",
                "description": "Short description of an error"
              },
              "data": {
                "type": "string",
                "example": "Height must be less than or equal to the current blockchain height",
                "description": "Full description of an error"
              }
            }
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SendTx"
              },
              {
                "$ref": "#/components/schemas/SellCoinTx"
              },
              {
                "$ref": "#/components/schemas/SellAllCoinTx"
              },
              {
                "$ref": "#/components/schemas/BuyCoinTx"
              },
              {
                "$ref": "#/components/schemas/CreateCoinTx"
              },
              {
                "$ref": "#/components/schemas/DeclareCandidacyTx"
              },
              {
                "$ref": "#/components/schemas/DelegateTx"
              },
              {
                "$ref": "#/components/schemas/UnbondTx"
              },
              {
                "$ref": "#/components/schemas/RedeemCheckTx"
              },
              {
                "$ref": "#/components/schemas/SetCandidateOffTx"
              },
              {
                "$ref": "#/components/schemas/SetCandidateOnTx"
              },
              {
                "$ref": "#/components/schemas/CreateMultisigTx"
              },
              {
                "$ref": "#/components/schemas/MultisendTx"
              },
              {
                "$ref": "#/components/schemas/EditCandidateTx"
              }
            ]
          }
        }
      },
      "TransactionsResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SendTx"
                },
                {
                  "$ref": "#/components/schemas/SellCoinTx"
                },
                {
                  "$ref": "#/components/schemas/SellAllCoinTx"
                },
                {
                  "$ref": "#/components/schemas/BuyCoinTx"
                },
                {
                  "$ref": "#/components/schemas/CreateCoinTx"
                },
                {
                  "$ref": "#/components/schemas/DeclareCandidacyTx"
                },
                {
                  "$ref": "#/components/schemas/DelegateTx"
                },
                {
                  "$ref": "#/components/schemas/UnbondTx"
                },
                {
                  "$ref": "#/components/schemas/RedeemCheckTx"
                },
                {
                  "$ref": "#/components/schemas/SetCandidateOffTx"
                },
                {
                  "$ref": "#/components/schemas/SetCandidateOnTx"
                },
                {
                  "$ref": "#/components/schemas/CreateMultisigTx"
                },
                {
                  "$ref": "#/components/schemas/MultisendTx"
                },
                {
                  "$ref": "#/components/schemas/EditCandidateTx"
                }
              ]
            }
          }
        }
      },
      "SendTransactionResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "example": 0
              },
              "data": {
                "type": "string",
                "example": ""
              },
              "log": {
                "type": "string",
                "example": ""
              },
              "hash": {
                "type": "string",
                "example": "B8B2DA0955773B3CB7F86EFC2137A23CE98E5791D59071BA4BB9EF9DFB9D4014"
              }
            }
          }
        }
      },
      "SendTransactionErrorResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "example": 412,
                "description": "General error code"
              },
              "message": {
                "type": "string",
                "example": "Check tx error",
                "description": "Short description of an error"
              },
              "tx_result": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "example": 101,
                    "description": "Tx error code"
                  },
                  "log": {
                    "type": "string",
                    "description": "Full description of tx checking error",
                    "example": "Unexpected nonce. Expected: 1, got 2."
                  }
                }
              }
            }
          }
        }
      },
      "BuyCoinTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 4
          },
          "data": {
            "type": "object",
            "properties": {
              "coin_to_sell": {
                "type": "string",
                "example": "MNT"
              },
              "coin_to_buy": {
                "type": "string",
                "example": "ABC"
              },
              "value_to_buy": {
                "type": "string",
                "example": "100000000000000000000"
              },
              "maximum_value_to_sell": {
                "type": "string",
                "example": "100000000000000000000"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.coin_to_sell": {
                "type": "string",
                "example": "MNT"
              },
              "tx.coin_to_buy": {
                "type": "string",
                "example": "ABC"
              },
              "tx.type": {
                "type": "string",
                "example": "04"
              },
              "tx.return": {
                "type": "string",
                "example": "1230000000"
              }
            }
          }
        }
      },
      "CandidateResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "reward_address": {
                "type": "string",
                "example": "Mx190fd0ad9fce4878ff7a6776a2692114e9838a34"
              },
              "owner_address": {
                "type": "string",
                "example": "Mx190fd0ad9fce4878ff7a6776a2692114e9838a34"
              },
              "total_stake": {
                "type": "string",
                "example": "209369045801925559657593"
              },
              "pub_key": {
                "type": "string",
                "example": "Mpc5b635cde82f796d1f8320efb8ec634f443e6b533a973570e4b5ea04aa44e96d"
              },
              "commission": {
                "type": "string",
                "example": "10"
              },
              "stakes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "owner": {
                      "type": "string",
                      "example": "Mx190fd0ad9fce4878ff7a6776a2692114e9838a34"
                    },
                    "coin": {
                      "type": "string",
                      "example": "MNT"
                    },
                    "value": {
                      "type": "string",
                      "example": "1000000000000000000"
                    },
                    "bip_value": {
                      "type": "string",
                      "example": "1000000000000000000"
                    }
                  }
                }
              },
              "created_at_block": {
                "type": "string",
                "example": "10"
              },
              "status": {
                "type": "integer",
                "enum": [
                  1,
                  2
                ],
                "example": 1
              }
            }
          }
        }
      },
      "CandidateNotFoundResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "example": 404,
                "description": "General error code"
              },
              "message": {
                "type": "string",
                "example": "Candidate not found",
                "description": "Short description of an error"
              }
            }
          }
        }
      },
      "ValidatorNotFoundResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "example": 404,
                "description": "General error code"
              },
              "message": {
                "type": "string",
                "example": "Validator not found",
                "description": "Short description of an error"
              }
            }
          }
        }
      },
      "CandidatesResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "reward_address": {
                  "type": "string",
                  "example": "Mx190fd0ad9fce4878ff7a6776a2692114e9838a34"
                },
                "owner_address": {
                  "type": "string",
                  "example": "Mx190fd0ad9fce4878ff7a6776a2692114e9838a34"
                },
                "total_stake": {
                  "type": "string",
                  "example": "209369045801925559657593"
                },
                "pub_key": {
                  "type": "string",
                  "example": "Mpc5b635cde82f796d1f8320efb8ec634f443e6b533a973570e4b5ea04aa44e96d"
                },
                "commission": {
                  "type": "string",
                  "example": "10"
                },
                "created_at_block": {
                  "type": "string",
                  "example": "10"
                },
                "status": {
                  "type": "integer",
                  "enum": [
                    1,
                    2
                  ],
                  "example": 1
                }
              }
            }
          }
        }
      },
      "ValidatorsResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pub_key": {
                  "type": "string",
                  "example": "Mpc5b635cde82f796d1f8320efb8ec634f443e6b533a973570e4b5ea04aa44e96d"
                },
                "voting_power": {
                  "type": "string",
                  "example": "10"
                }
              }
            }
          }
        }
      },
      "CoinInfoResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "ABC Coin"
              },
              "symbol": {
                "type": "string",
                "example": "ABC"
              },
              "volume": {
                "type": "string",
                "example": "209369045801925559657593"
              },
              "crr": {
                "type": "string",
                "example": "50"
              },
              "reserve_balance": {
                "type": "string",
                "example": "209369045801925559657593"
              },
              "max_supply": {
                "type": "string",
                "example": "1000000000000000000000000000000000"
              }
            }
          }
        }
      },
      "CreateCoinTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 5
          },
          "data": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "ABC coin"
              },
              "symbol": {
                "type": "string",
                "example": "ABC"
              },
              "initial_amount": {
                "type": "string",
                "example": "100000000000000000000"
              },
              "initial_reserve": {
                "type": "string",
                "example": "100000000000000000000"
              },
              "constant_reserve_ratio": {
                "type": "string",
                "example": "40"
              },
              "max_supply": {
                "type": "string",
                "example": "100000000000000000000"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "05"
              },
              "tx.coin": {
                "type": "string",
                "example": "ABC"
              }
            }
          }
        }
      },
      "CreateMultisigTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 12
          },
          "data": {
            "type": "object",
            "properties": {
              "threshold": {
                "type": "string",
                "example": "10"
              },
              "weights": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "1"
                }
              },
              "addresses": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "Mx184ac726059e43643e67290666f7b3195093f870"
                }
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "12"
              }
            }
          }
        }
      },
      "DeclareCandidacyTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 6
          },
          "data": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "example": "Mx184ac726059e43643e67290666f7b3195093f870"
              },
              "pub_key": {
                "type": "string",
                "example": "Mp9d62d3d3892be2a8b924759530f585039c58cb3c9fb44890abc2433122748f02"
              },
              "commission": {
                "type": "string",
                "example": "10"
              },
              "coin": {
                "type": "string",
                "example": "MNT"
              },
              "stake": {
                "type": "string",
                "example": "1000000000000000000000000"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "06"
              }
            }
          }
        }
      },
      "DelegateTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 7
          },
          "data": {
            "type": "object",
            "properties": {
              "pub_key": {
                "type": "string",
                "example": "Mp9d62d3d3892be2a8b924759530f585039c58cb3c9fb44890abc2433122748f02"
              },
              "coin": {
                "type": "string",
                "example": "MNT"
              },
              "value": {
                "type": "string",
                "example": "1000000000000000000000000"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "07"
              }
            }
          }
        }
      },
      "EditCandidateTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 14
          },
          "data": {
            "type": "object",
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "pub_key": {
                      "type": "string",
                      "example": "Mp9d62d3d3892be2a8b924759530f585039c58cb3c9fb44890abc2433122748f02"
                    },
                    "reward_address": {
                      "type": "string",
                      "example": "Mx184ac726059e43643e67290666f7b3195093f870"
                    },
                    "owner_address": {
                      "type": "string",
                      "example": "Mx184ac726059e43643e67290666f7b3195093f870"
                    }
                  }
                }
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "14"
              }
            }
          }
        }
      },
      "EstimateCoinBuyResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "will_pay": {
                "type": "string",
                "example": "209369045801925559657593"
              },
              "commission": {
                "type": "string",
                "example": "209369045801925559657593"
              }
            }
          }
        }
      },
      "EstimateCoinSellResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "will_get": {
                "type": "string",
                "example": "209369045801925559657593"
              },
              "commission": {
                "type": "string",
                "example": "209369045801925559657593"
              }
            }
          }
        }
      },
      "EstimateCoinSellAllResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "will_get": {
                "type": "string",
                "example": "209369045801925559657593"
              }
            }
          }
        }
      },
      "EstimateTxCommissionResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "commission": {
                "type": "string",
                "example": "209369045801925559657593"
              }
            }
          }
        }
      },
      "MultisendTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 13
          },
          "data": {
            "type": "object",
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "coin": {
                      "type": "string",
                      "example": "MNT"
                    },
                    "to": {
                      "type": "string",
                      "example": "Mx184ac726059e43643e67290666f7b3195093f870"
                    },
                    "value": {
                      "type": "string",
                      "example": "100000000000000000000"
                    }
                  }
                }
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "13"
              }
            }
          }
        }
      },
      "RedeemCheckTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 9
          },
          "data": {
            "type": "object",
            "properties": {
              "raw_check": {
                "type": "string",
                "example": "Mc9d62d3d3892be2a8b924759530f585039c58cb3c9fb44890abc2433122748f02"
              },
              "proof": {
                "type": "string",
                "example": "9d62d3d3892be2a8b924759530f585039c58cb3c9fb44890abc2433122748f02"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "09"
              }
            }
          }
        }
      },
      "SellAllCoinTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 3
          },
          "data": {
            "type": "object",
            "properties": {
              "coin_to_sell": {
                "type": "string",
                "example": "MNT"
              },
              "coin_to_buy": {
                "type": "string",
                "example": "ABC"
              },
              "minimum_value_to_buy": {
                "type": "string",
                "example": "100000000000000000000"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.coin_to_sell": {
                "type": "string",
                "example": "MNT"
              },
              "tx.coin_to_buy": {
                "type": "string",
                "example": "ABC"
              },
              "tx.type": {
                "type": "string",
                "example": "03"
              },
              "tx.return": {
                "type": "string",
                "example": "1230000000"
              },
              "tx.sell_amount": {
                "type": "string",
                "example": "1230000000"
              }
            }
          }
        }
      },
      "SellCoinTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 2
          },
          "data": {
            "type": "object",
            "properties": {
              "coin_to_sell": {
                "type": "string",
                "example": "MNT"
              },
              "coin_to_buy": {
                "type": "string",
                "example": "ABC"
              },
              "value_to_sell": {
                "type": "string",
                "example": "100000000000000000000"
              },
              "minimum_value_to_buy": {
                "type": "string",
                "example": "100000000000000000000"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.coin_to_sell": {
                "type": "string",
                "example": "MNT"
              },
              "tx.coin_to_buy": {
                "type": "string",
                "example": "ABC"
              },
              "tx.type": {
                "type": "string",
                "example": "02"
              },
              "tx.return": {
                "type": "string",
                "example": "1230000000"
              }
            }
          }
        }
      },
      "SendTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 1
          },
          "data": {
            "type": "object",
            "properties": {
              "coin": {
                "type": "string",
                "example": "MNT"
              },
              "to": {
                "type": "string",
                "example": "Mx184ac726059e43643e67290666f7b3195093f870"
              },
              "value": {
                "type": "string",
                "example": "100000000000000000000"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.to": {
                "type": "string",
                "example": "c22d7a6273fd2bbf03884038e3d99571d746ac7e"
              },
              "tx.coin": {
                "type": "string",
                "example": "MNT"
              },
              "tx.type": {
                "type": "string",
                "example": "01"
              }
            }
          }
        }
      },
      "SetCandidateOffTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 11
          },
          "data": {
            "type": "object",
            "properties": {
              "pub_key": {
                "type": "string",
                "example": "Mp9d62d3d3892be2a8b924759530f585039c58cb3c9fb44890abc2433122748f02"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "11"
              }
            }
          }
        }
      },
      "SetCandidateOnTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 10
          },
          "data": {
            "type": "object",
            "properties": {
              "pub_key": {
                "type": "string",
                "example": "Mp9d62d3d3892be2a8b924759530f585039c58cb3c9fb44890abc2433122748f02"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "10"
              }
            }
          }
        }
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "example": "0.9.5-a8c56270"
              },
              "latest_block_hash": {
                "type": "string",
                "example": "9B3659F6F24F30EF491B3CF239B2E3E87A625096B29DA6F55EBA6B38BF5BEE07"
              },
              "latest_app_hash": {
                "type": "string",
                "example": "CB511A789FB49BDE67DE6F4A8189A80E9614569D0134FC6258556DF40B4B8E80"
              },
              "latest_block_height": {
                "type": "string",
                "example": "359793"
              },
              "latest_block_time": {
                "type": "string",
                "example": "2019-01-15T10:57:13.579973521Z"
              },
              "state_history": {
                "type": "string",
                "enum": [
                  "on",
                  "off"
                ],
                "example": "off"
              },
              "tm_status": {
                "type": "object",
                "properties": {
                  "node_info": {
                    "type": "object",
                    "properties": {
                      "protocol_version": {
                        "type": "object",
                        "properties": {
                          "p2p": {
                            "type": "string",
                            "example": "5"
                          },
                          "block": {
                            "type": "string",
                            "example": "8"
                          },
                          "app": {
                            "type": "string",
                            "example": "1"
                          }
                        }
                      },
                      "id": {
                        "type": "string",
                        "example": "647e32df3b9c54809b5aca2877d9ba60900bc2d9"
                      },
                      "listen_addr": {
                        "type": "string",
                        "example": "tcp://0.0.0.0:26656"
                      },
                      "network": {
                        "type": "string",
                        "example": "minter-test-network-28"
                      },
                      "version": {
                        "type": "string",
                        "example": "0.27.4"
                      },
                      "channels": {
                        "type": "string",
                        "example": "4020212223303800"
                      },
                      "moniker": {
                        "type": "string",
                        "example": "minter-node-1.testnet.minter.network"
                      },
                      "other": {
                        "type": "object",
                        "properties": {
                          "tx_index": {
                            "type": "string",
                            "example": "on",
                            "enum": [
                              "on",
                              "off"
                            ]
                          },
                          "rpc_address": {
                            "type": "string",
                            "example": "tcp://0.0.0.0:26657"
                          }
                        }
                      }
                    }
                  },
                  "sync_info": {
                    "type": "object",
                    "properties": {
                      "latest_block_hash": {
                        "type": "string",
                        "example": "9B3659F6F24F30EF491B3CF239B2E3E87A625096B29DA6F55EBA6B38BF5BEE07"
                      },
                      "latest_app_hash": {
                        "type": "string",
                        "example": "CB511A789FB49BDE67DE6F4A8189A80E9614569D0134FC6258556DF40B4B8E80"
                      },
                      "latest_block_height": {
                        "type": "string",
                        "example": "359793"
                      },
                      "latest_block_time": {
                        "type": "string",
                        "example": "2019-01-15T10:57:13.579973521Z"
                      },
                      "catching_up": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  },
                  "validator_info": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string",
                        "example": "F4935E4169DD647F11E9E01EFB04779D3AC3AA9B"
                      },
                      "pub_key": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "example": "tendermint/PubKeyEd25519"
                          },
                          "value": {
                            "type": "string",
                            "example": "SuHuc+YTbIWwypM6mhNHdYozSIXxCzI4OYpnrC6xU7g="
                          }
                        }
                      },
                      "voting_power": {
                        "type": "string",
                        "example": "0"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UnbondTx": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "6D94F757237A5AB007191349E327D342AF45B38332CC65CB3780AD83E627F22E"
          },
          "raw_tx": {
            "type": "string",
            "example": "f886821b9d018a4d4e540000000000000001abea8a4d4e540000000000000094c22d7a6273fd2bbf03884038e3d99571d746ac7e89056bc75e2d63100000808001b845f8431ca0b37eb53ec1c68aedc3e47e9c510bba14ff7fec47d0c08a39e518c287c25252bca030275aad807be5a624ee014757f850232e527b41997f54f8aa5a7584b26418c6"
          },
          "from": {
            "type": "string",
            "example": "Mx184ac726059e43643e67290666f7b3195093f870"
          },
          "nonce": {
            "type": "string",
            "example": "7069"
          },
          "gas_price": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "integer",
            "example": 8
          },
          "data": {
            "type": "object",
            "properties": {
              "pub_key": {
                "type": "string",
                "example": "Mp9d62d3d3892be2a8b924759530f585039c58cb3c9fb44890abc2433122748f02"
              },
              "coin": {
                "type": "string",
                "example": "MNT"
              },
              "stake": {
                "type": "string",
                "example": "1000000000000000000000000"
              }
            }
          },
          "payload": {
            "type": "string",
            "example": "payload"
          },
          "service_data": {
            "type": "string",
            "example": "service data"
          },
          "gas": {
            "type": "string",
            "example": "10"
          },
          "gas_coin": {
            "type": "string",
            "example": "MNT"
          },
          "tags": {
            "type": "object",
            "properties": {
              "tx.from": {
                "type": "string",
                "example": "184ac726059e43643e67290666f7b3195093f870"
              },
              "tx.type": {
                "type": "string",
                "example": "08"
              }
            }
          }
        }
      },
      "UnconfirmedTxsResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "n_txs": {
                "type": "string",
                "example": "1"
              },
              "txs": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "+JKCC9cBik1OVAAAAAAAAAAHt/agjwU/OALTP15wkrsBypmud2BvT691nHJWDV7mm44ZGlaKTU5UAAAAAAAAAIlSO1qu0qGWxiyAgAG4RfhDG6A1ZJqmHzkcTzLjLiFgWxf1MmnaU9uu7VCTcU/r819wraBZjjl3J+SQ2lAV07OrGoJ2Itc9sFJurRTgj/n2p5c8UA=="
                }
              }
            }
          }
        }
      },
      "MissedBlocksResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": ""
          },
          "result": {
            "type": "object",
            "properties": {
              "missed_blocks": {
                "type": "string",
                "example": "________________________"
              },
              "missed_blocks_count": {
                "type": "string",
                "example": "0"
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/address": {
      "get": {
        "summary": "Address",
        "description": "Get balance and transaction count of given address",
        "operationId": "address",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Minter Address, starts with Mx...",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainAccountRepository repository = MinterBlockChainApi.getInstance().account();\nCall<BCResult<Balance>> request = repository.getBalance(\"Mx618ed05277e7568ee943cd1b8e22ced4cf873f95\");\n\nrequest.enqueue(new Callback<BCResult<Balance>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<Balance>> call, @Nonnull Response<BCResult<Balance>> response) {\n        BCResult<Balance> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<Balance>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\n// Get balance\ntry {\n    $response = $api->getBalance('Mx618ed05277e7568ee943cd1b8e22ced4cf873f95');\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n\n// Get nonce of address\ntry {\n    $response = $api->getNonce('Mx618ed05277e7568ee943cd1b8e22ced4cf873f95');\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "\nimport MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/api/\")\n\nlet accountManager = AccountManager.default\n\naccountManager.address(\"Mx618ed05277e7568ee943cd1b8e22ced4cf873f95\") { [weak self] (resp, error) in\n\tprint(resp)\n\tprint(error)\n}\n"
          }
        ]
      }
    },
    "/block": {
      "get": {
        "summary": "Block",
        "description": "Get information about given block",
        "operationId": "block",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "description": "Block height",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockResponse"
                }
              }
            }
          },
          "404": {
            "description": "Block not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainBlockRepository repository = MinterBlockChainApi.getInstance().block();\nCall<BCResult<BlockInfo>> request = repository.getByHeight(1);\n\nrequest.enqueue(new Callback<BCResult<BlockInfo>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<BlockInfo>> call, @Nonnull Response<BCResult<BlockInfo>> response) {\n        BCResult<BlockInfo> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<BlockInfo>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $height = 1;\n    $response = $api->getBlock($height);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = BlockManager.default\n\nmanager.blocks(height: \"1\") { blocks, error in\n\tprint(blocks)\n\tprint(error)\n}\n"
          }
        ]
      }
    },
    "/candidate": {
      "get": {
        "summary": "Candidate",
        "description": "Get information about candidate",
        "operationId": "candidate",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "pub_key",
            "in": "query",
            "description": "Public key of a candidate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Candidate not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainCandidateRepository repository = MinterBlockChainApi.getInstance().candidate();\n\n// Get candidate by Public Key\nCall<BCResult<CandidateItem>> requestByPubKey = repository.getCandidate(new MinterPublicKey(\"Mpb52951425d2517504f767215ca77a9be3e0cd788fd72443da9b174fc686a37f0\"));\n\nrequestByPubKey.enqueue(new Callback<BCResult<CandidateItem>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<CandidateItem>> call, @Nonnull Response<BCResult<CandidateItem>> response) {\n        BCResult<CandidateItem> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<CandidateItem>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $publicKey = 'Mpb52951425d2517504f767215ca77a9be3e0cd788fd72443da9b174fc686a37f0';\n    $response = $api->getCandidate($publicKey);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = CandidateManager.default\n\nmanager.candidate(publicKey: \"Mpb52951425d2517504f767215ca77a9be3e0cd788fd72443da9b174fc686a37f0\", completion: { (response, error) in\n\tprint(response)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/candidates": {
      "get": {
        "summary": "Candidates",
        "description": "Get information about candidates",
        "operationId": "candidates",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_stakes",
            "in": "query",
            "description": "Include candidate stakes",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidatesResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainCandidateRepository repository = MinterBlockChainApi.getInstance().candidate();\n\n// Get candidate by public key\nCall<BCResult<List<CandidateStatus>>> request = repository.getBlockCandidates(100);\n\nrequest.enqueue(new Callback<BCResult<List<CandidateStatus>>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<List<CandidateStatus>>> call, @Nonnull Response<BCResult<List<CandidateStatus>>> response) {\n        BCResult<List<CandidateStatus>> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<List<CandidateStatus>>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $height = 1; // optional, should be positive integer or null\n    $response = $api->getCandidates($height);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = CandidateManager.default\n\nmanager.candidates(height: \"1\", completion: { (response, error) in\n\tprint(response)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/coin_info": {
      "get": {
        "summary": "Coin Info",
        "description": "Get information about coin",
        "operationId": "coin",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Coin symbol",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinInfoResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainCoinRepository repository = MinterBlockChainApi.getInstance().coin();\nCall<BCResult<Coin>> request = repository.getCoinInfo(\"TESTCOIN\");\n\nrequest.enqueue(new Callback<BCResult<Coin>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<Coin>> call, @Nonnull Response<BCResult<Coin>> response) {\n        BCResult<Coin> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<Coin>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n "
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $coinSymbol = 'TESTCOIN';\n    $response = $api->getCoinInfo($coinSymbol);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = CoinManager.default\n\nself.manager?.info(symbol: \"TESTCOIN\", completion: { (coin, error) in\n\tprint(coin)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/estimate_coin_buy": {
      "get": {
        "summary": "Estimate Buy Coin",
        "description": "Estimate Buy Coin operation",
        "operationId": "estimate_coin_buy",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "coin_to_sell",
            "in": "query",
            "description": "Coin symbol to sell",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coin_to_buy",
            "in": "query",
            "description": "Coin symbol to buy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value_to_buy",
            "in": "query",
            "description": "Value to buy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateCoinBuyResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainCoinRepository repository = MinterBlockChainApi.getInstance().coin();\nCall<BCResult<ExchangeBuyValue>> request = repository.getCoinExchangeCurrencyToBuy(\n        \"MNT\",\n        new BigDecimal(\"10\"),\n        \"TESTCOIN\");\n\nrequest.enqueue(new Callback<BCResult<ExchangeBuyValue>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<ExchangeBuyValue>> call, @Nonnull Response<BCResult<ExchangeBuyValue>> response) {\n        BCResult<ExchangeBuyValue> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<ExchangeBuyValue>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});"
          },
          {
            "lang": "JavaScript",
            "source": "import {Minter, SendTxParams, API_TYPE_NODE} from \"minter-js-sdk\";\n\nconst minterSDK = new Minter({apiType: API_TYPE_NODE, baseURL: 'https://minter-node-1.testnet.minter.network:8841'});\n\nminterSDK.estimateCoinBuy({\n        coinToSell: 'MNT',\n        valueToBuy: 1,\n        coinToBuy: 'ASDCOIN',\n    })\n    .then((estimateResult) => {\n        console.log(estimateResult.will_pay);\n        console.log(estimateResult.commission);\n    })\n    .catch((error) => {\n        const errorMessage = error.response.data.error.message;\n        console.log(errorMessage);\n    });\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $coinToSell = 'TESTCOIN';\n    $coinToBuy = 'MNT';\n    $valueToBuy = '10.5';\n\n    $response = $api->estimateCoinBuy($coinToSell, $valueToBuy, $coinToBuy);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = TransactionManager.default\n\nmanager.estimateCoinBuy(from: \"MNT\", to: \"TESTBOT\", amount: Decimal(string: \"10000000000\")!, completion: { (willPay, commission, error) in\n\tprint(willPay)\n\tprint(commission)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/estimate_coin_sell_all": {
      "get": {
        "summary": "Estimate Sell all Coin",
        "description": "Estimate Sell all Coin operation",
        "operationId": "estimate_coin_sell_all",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "coin_to_sell",
            "in": "query",
            "description": "Coin symbol to sell",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coin_to_buy",
            "in": "query",
            "description": "Coin symbol to buy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value_to_sell",
            "in": "query",
            "description": "Value to sell",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateCoinSellAllResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/estimate_coin_sell": {
      "get": {
        "summary": "Estimate Sell Coin",
        "description": "Estimate Sell Coin operation",
        "operationId": "estimate_coin_sell",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "coin_to_sell",
            "in": "query",
            "description": "Coin symbol to sell",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coin_to_buy",
            "in": "query",
            "description": "Coin symbol to buy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value_to_sell",
            "in": "query",
            "description": "Value to sell",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateCoinSellResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainCoinRepository repository = MinterBlockChainApi.getInstance().coin();\nCall<BCResult<ExchangeSellValue>> request = repository.getCoinExchangeCurrencyToSell(\n        \"MNT\",\n        new BigDecimal(\"10\"),\n        \"TESTCOIN\");\n\nrequest.enqueue(new Callback<BCResult<ExchangeSellValue>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<ExchangeSellValue>> call, @Nonnull Response<BCResult<ExchangeSellValue>> response) {\n        BCResult<ExchangeSellValue> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<ExchangeSellValue>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "JavaScript",
            "source": "import {Minter, SendTxParams, API_TYPE_NODE} from \"minter-js-sdk\";\n\nconst minterSDK = new Minter({apiType: API_TYPE_NODE, baseURL: 'https://minter-node-1.testnet.minter.network:8841'});\n\nminterSDK.estimateCoinSell({\n        coinToSell: 'MNT',\n        valueToSell: 1,\n        coinToBuy: 'ASDCOIN',\n    })\n    .then((estimateResult) => {\n        console.log(estimateResult.will_get);\n        console.log(estimateResult.commission);\n    })\n    .catch((error) => {\n        const errorMessage = error.response.data.error.message;\n        console.log(errorMessage);\n    });\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $coinToSell = 'MNT';\n    $coinToBuy = 'TESTCOIN';\n    $valueToSell = '10.5';\n\n    $response = $api->estimateCoinSell($coinToSell, $valueToSell, $coinToBuy);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = TransactionManager.default\n\nmanager.estimateCoinSell(from: \"MNT\", to: \"VALIDATOR\", amount: Decimal(string: \"10000000000\")!, completion: { (willPay, commission, error) in\n\tprint(error)\n\tprint(willPay)\n\tprint(commission)\n})\n"
          }
        ]
      }
    },
    "/estimate_tx_commission": {
      "get": {
        "summary": "Estimate Tx Commission",
        "description": "Estimate tx commission",
        "operationId": "estimate_tx_commission",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "tx",
            "in": "query",
            "description": "Raw transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateTxCommissionResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainTransactionRepository repository = MinterBlockChainApi.getInstance().transactions();\n\nString sign = \"...\"; // signed transaction hash started without 0x\nCall<BCResult<TransactionCommissionValue>> request = repository.getTransactionCommission(\"\");\n\nrequest.enqueue(new Callback<BCResult<TransactionCommissionValue>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<TransactionCommissionValue>> call, @Nonnull Response<BCResult<TransactionCommissionValue>> response) {\n        BCResult<TransactionCommissionValue> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<TransactionCommissionValue>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "JavaScript",
            "source": "import {Minter, SendTxParams, API_TYPE_NODE} from \"minter-js-sdk\";\n\nconst minterSDK = new Minter({apiType: API_TYPE_NODE, baseURL: 'https://minter-node-1.testnet.minter.network:8841'});\nconst rawTx = 'f8911a018a4d4e540000000000000001aae98a4d4e5400000000000000947633980c000139dd3bd24a3f54e06474fa941e16888ac7230489e800008e637573746f6d206d6573736167658001b845f8431ca0c0716faaac63263c8c6106fa17f863eec2de60431214dd8d775147d4ed972410a05f881fb3938acf69a0a7eb761e5479fbbd60780e1db0c85a0670150eb7b070ab';\n\nminterSDK.estimateTxCommission({\n        transaction: rawTx,\n    })\n    .then((commission) => {\n        console.log(commission);\n    })\n    .catch((error) => {\n        const errorMessage = error.response.data.error.message;\n        console.log(errorMessage);\n    });\n\n\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $tx = '0x...';\n    $response = $api->estimateTxCommission($tx);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = TransactionManager.default\n\nlet tx = \"f88313018a424c41434b434f494e0001aae98a424c41434b434f494e0094228e5a68b847d169da439ec15f727f08233a7ca6883ed6df8a5bc9f6f1808001b845f8431ca02814f29ccc1c1438532d286ce285f3897939281c36da7785ab99f76e2e5f8f91a074acc3624f466302addf4b734eeac4f977179cf1d93f7351cf74c2acda5732f1\"\n\nmanager.estimateCommission(for: tx, completion: { (comission, error) in\n\tprint(comission)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/events": {
      "get": {
        "summary": "Events",
        "description": "Get events for given height",
        "operationId": "events",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainEventRepository repository = MinterBlockChainApi.getInstance().event();\n\nlong blockHeight = 1;\nCall<BCResult<EventList>> request = repository.getEvents(blockHeight);\n\nrequest.enqueue(new Callback<BCResult<EventList>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<EventList>> call, @Nonnull Response<BCResult<EventList>> response) {\n        BCResult<EventList> body = response.body();\n        if (body.isOk()) {\n            // EventList.RewardEvent event = body.result.events.get(0).getValue();\n            // EventList.SlashEvent event = body.result.events.get(1).getValue();\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<EventList>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $height = 1;\n    $response = $api->getEvents($height);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = EventManager.default\n\nmanager.events(height: \"1\") { events, error in\n\tprint(events)\n\tprint(error)\n}\n"
          }
        ]
      }
    },
    "/max_gas": {
      "get": {
        "summary": "Max Gas",
        "description": "Maximum available gas in block",
        "operationId": "maxgas",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaxGasResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/min_gas_price": {
      "get": {
        "summary": "Min gas price",
        "description": "Minimal gas price for block",
        "operationId": "mingas",
        "tags": [
          "Node API"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinGasResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/missed_blocks": {
      "get": {
        "summary": "Missed blocks",
        "description": "Missed blocks",
        "operationId": "missed_blocks",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "pub_key",
            "in": "query",
            "description": "Public key of a candidate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissedBlocksResponse"
                }
              }
            }
          },
          "404": {
            "description": "Validator not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/send_transaction": {
      "get": {
        "summary": "Send Transaction",
        "description": "Send Transaction to the mempool.\nАfter getting into the mempool the transaction need some time (~5sec) to appear in the blockchain.\nNote: in some rare cases transaction may appear in the block with failed status, so check it by hash, to ensure that it is succeeded.\n",
        "operationId": "send_transaction",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "tx",
            "in": "query",
            "description": "Tx to send, should start with 0x",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendTransactionResponse"
                }
              }
            }
          },
          "412": {
            "description": "Tx check error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendTransactionErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainAccountRepository repository = MinterBlockChainApi.getInstance().account();\n\n// build transaction with builder,\n// see https://github.com/MinterTeam/minter-android-blockchain#2-creating-and-signing-transactions for more details\nTransaction tx = new Transaction.Builder(new BigInteger(\"1\"))\n        .sendCoin()\n        .build();\n\nPrivateKey pk = new PrivateKey(\"...\");\nTransactionSign sign = tx.signSingle(pk);\n\nCall<BCResult<TransactionSendResult>> request = repository.sendTransaction(sign);\n\nrequest.enqueue(new Callback<BCResult<TransactionSendResult>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<TransactionSendResult>> call, @Nonnull Response<BCResult<TransactionSendResult>> response) {\n        BCResult<TransactionSendResult> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<TransactionSendResult>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "JavaScript",
            "source": "import {Minter, SendTxParams, API_TYPE_NODE} from \"minter-js-sdk\";\n\nconst minterSDK = new Minter({apiType: API_TYPE_NODE, baseURL: 'https://minter-node-1.testnet.minter.network:8841'});\nconst txParams = new SendTxParams({\n    privateKey: '5fa3a8b186f6cc2d748ee2d8c0eb7a905a7b73de0f2c34c5e7857c3b46f187da',\n    address: 'Mx7633980c000139dd3bd24a3f54e06474fa941e16',\n    amount: 10,\n    coinSymbol: 'MNT',\n    feeCoinSymbol: 'ASD',\n    message: 'custom message',\n});\n\nminterSDK.postTx(txParams)\n    .then((txHash) => {\n        console.log(`Tx created: ${txHash}`);\n    })\n    .catch((error) => {\n        const errorMessage = error.response.data.error.message;\n        console.log(errorMessage);\n    });\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse Minter\\SDK\\MinterTx;\nuse Minter\\SDK\\MinterCoins\\MinterSendCoinTx;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\n// Construct tx\n$tx = new MinterTx([\n    'nonce' => $api->getNonce('sender address here'),\n    'chainId' => MinterTx::TESTNET_CHAIN_ID, // or MinterTx::MAINNET_CHAIN_ID\n    'gasPrice' => 1,\n    'gasCoin' => 'MNT',\n    'type' => MinterSendCoinTx::TYPE,\n    'data' => [\n        'coin' => 'MTN',\n        'to' => 'receiver address here',\n        'value' => '10'\n    ],\n    'payload' => '',\n    'serviceData' => '',\n    'signatureType' => MinterTx::SIGNATURE_SINGLE_TYPE\n]);\n\n// Sign tx\n$tx = $tx->sign('your private key');\n\ntry {\n    $response = $api->send($tx);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = TransactionManager.default\n\nlet tx = DeclareCandidacyRawTransaction(nonce: BigUInt(1), gasCoin: \"MNT\", address: \"MxAddress\", publicKey: \"MpPublicKey\", commission: BigUInt(decimal: 10.0)!, coin: \"MNT\", stake: BigUInt(decimal: 100.0)!)\n\nlet signed = RawTransactionSigner.sign(rawTx: tx, privateKey: \"Private Key String Here\")\n\nmanager.send(tx: signed!) { (res, res1, error) in\n\t\n}\n"
          }
        ]
      }
    },
    "/status": {
      "get": {
        "summary": "Status",
        "description": "Get overall status of Minter Node",
        "operationId": "status",
        "tags": [
          "Node API"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainStatusRepository repository = MinterBlockChainApi.getInstance().status();\n\nCall<BCResult<NetworkStatus>> request = repository.getNetworkStatus();\n\nrequest.enqueue(new Callback<BCResult<NetworkStatus>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<NetworkStatus>> call, @Nonnull Response<BCResult<NetworkStatus>> response) {\n        BCResult<NetworkStatus> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<NetworkStatus>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $response = $api->getStatus();\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = StatusManager.default\n\nmanager.status(with: { (response, error) in\n\tprint(response)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/transaction": {
      "get": {
        "summary": "Transaction",
        "description": "Get transaction by hash",
        "operationId": "transaction",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "description": "Specify tx hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainTransactionRepository repository = MinterBlockChainApi.getInstance().transactions();\n\nCall<BCResult<HistoryTransaction>> request = repository.getTransaction(\"\");\n\nrequest.enqueue(new Callback<BCResult<HistoryTransaction>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<HistoryTransaction>> call, @Nonnull Response<BCResult<HistoryTransaction>> response) {\n        BCResult<HistoryTransaction> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<HistoryTransaction>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $hash = 'Mt...';\n    $response = $api->getTransaction($hash);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = TransactionManager.default\n\nmanager.transaction(hash: \"Mtb181f0185dfbda5f6ed497581dce1bf4cbac2a427374bf45018343c7af6471b8\", completion: { (transaction, error) in\n\tprint(transaction)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/transactions": {
      "get": {
        "summary": "Transactions Search",
        "description": "Search Transactions",
        "operationId": "transactions",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Specify query string",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Transactions per page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainTransactionRepository repository = MinterBlockChainApi.getInstance().transactions();\n\nCall<BCResult<List<HistoryTransaction>>> request = repository.getTransactions(\n        new BlockChainTransactionRepository.TQuery()\n                .setFrom(\"Mx...\")\n                .setTo(\"Mx...\")\n);\n\nrequest.enqueue(new Callback<BCResult<List<HistoryTransaction>>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<List<HistoryTransaction>>> call, @Nonnull Response<BCResult<List<HistoryTransaction>>> response) {\n        BCResult<List<HistoryTransaction>> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<List<HistoryTransaction>>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $query = '';\n    $response = $api->getTransactions($query);\n    print_r($response);\n} catch(RequestException $exception) {\n    \n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = TransactionManager.default\n\nmanager.transactions(query: \"query here\", completion: { (transactions, error) in\n\tprint(transactions)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/unconfirmed_txs": {
      "get": {
        "summary": "Unconfirmed Transactions",
        "description": "Unconfirmed Transactions",
        "operationId": "unconfirmed_txs",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnconfirmedTxsResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainTransactionRepository repository = MinterBlockChainApi.getInstance().transactions();\n\nCall<BCResult<UnconfirmedTransactions>> request = repository.getUnconfirmedList();\n\nrequest.enqueue(new Callback<BCResult<UnconfirmedTransactions>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<UnconfirmedTransactions>> call, @Nonnull Response<BCResult<UnconfirmedTransactions>> response) {\n        BCResult<UnconfirmedTransactions> body = response.body();\n        if (body.isOk()) {\n            /*\n            for(TransactionSign sign: body.result) {\n                // do smthng with sign\n            }\n            */\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<UnconfirmedTransactions>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $limit = 10; // optional, should be positive integer or null\n    $response = $api->getUnconfirmedTxs($limit);\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = TransactionManager.default\n\nmanager.unconfirmedTransactions(height: \"0\", completion: { (transactions, error) in\n\tprint(transactions)\n\tprint(error)\n})\n"
          }
        ]
      }
    },
    "/validators": {
      "get": {
        "summary": "Validators",
        "description": "Get information about validators",
        "operationId": "validators",
        "tags": [
          "Node API"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "description": "Specify height",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Validators per page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorsResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "MinterBlockChainApi.initialize(\"https://minter-node-1.testnet.minter.network:8841\");\n\nBlockChainStatusRepository repository = MinterBlockChainApi.getInstance().status();\n\nCall<BCResult<List<NetworkStatus.Validator>>> request = repository.getValidators();\n\nrequest.enqueue(new Callback<BCResult<List<NetworkStatus.Validator>>>() {\n    @Override\n    public void onResponse(@Nonnull Call<BCResult<List<NetworkStatus.Validator>>> call, @Nonnull Response<BCResult<List<NetworkStatus.Validator>>> response) {\n        BCResult<List<NetworkStatus.Validator>> body = response.body();\n        if (body.isOk()) {\n            // do something with body.result\n        } else {\n            // handle error\n        }\n    }\n\n    @Override\n    public void onFailure(@Nonnull Call<BCResult<List<NetworkStatus.Validator>>> call, @Nonnull Throwable t) {\n        // handle error\n    }\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nuse Minter\\MinterAPI;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$api = new MinterAPI('https://minter-node-1.testnet.minter.network:8841');\n\ntry {\n    $response = $api->getValidators();\n    print_r($response);\n} catch(RequestException $exception) {\n    // handle error\n}\n"
          },
          {
            "lang": "Swift",
            "source": "import MinterCore\n\nMinterCoreSDK.initialize(urlString: \"https://minter-node-1.testnet.minter.network:8841/\")\n\nlet manager = ValidatorManager.default\n\nmanager.validators(with: { (validators, error) in\n\tprint(validators)\n\tprint(error)\n})\n"
          }
        ]
      }
    }
  }
}
